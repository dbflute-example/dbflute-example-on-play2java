${manager.allClassCopyright}package ${request.package}.cbean.cq.bs;

import java.time.*;
import java.util.Collection;

import ${request.package}.allcommon.EsAbstractConditionQuery;
import ${request.package}.cbean.cq.${table.camelizedName}CQ;
import org.dbflute.cbean.ckey.ConditionKey;
#if ($esVersion.isGreaterEqual("2.0.0"))
import org.dbflute.exception.IllegalConditionBeanOperationException;
#end
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.FuzzyQueryBuilder;
import org.elasticsearch.index.query.IdsQueryBuilder;
import org.elasticsearch.index.query.MatchQueryBuilder;
#if ($esVersion.isGreaterEqual("2.0.0"))
import org.elasticsearch.index.query.NotQueryBuilder;
#end
import org.elasticsearch.index.query.PrefixQueryBuilder;
#if ($esVersion.isGreaterEqual("2.0.0"))
import org.elasticsearch.index.query.QueryBuilders;
#end
import org.elasticsearch.index.query.RangeQueryBuilder;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.index.query.TermsQueryBuilder;

#if ($esVersion.isLessThan("2.0.0"))
import ${request.package}.cbean.cf.${table.camelizedName}CF;
import org.elasticsearch.index.query.FilteredQueryBuilder;
#end

/**
 * @author ESFlute (using FreeGen)
 */
public abstract class Bs${table.camelizedName}CQ extends EsAbstractConditionQuery {

    protected static final Class<?> suppressUnusedImportLocalDateTime = LocalDateTime.class;

    // ===================================================================================
    //                                                                       Name Override
    //                                                                       =============
    @Override
    public String asTableDbName() {
        return "${table.name}";
    }

    @Override
    public String xgetAliasName() {
        return "${table.name}";
    }

    // ===================================================================================
    //                                                                       Query Control
    //                                                                       =============
#if ($esVersion.isLessThan("2.0.0"))
    public void filtered(FilteredCall<${table.camelizedName}CQ, ${table.camelizedName}CF> filteredLambda) {
        filtered(filteredLambda, null);
    }

    public void filtered(FilteredCall<${table.camelizedName}CQ, ${table.camelizedName}CF> filteredLambda,
            ConditionOptionCall<FilteredQueryBuilder> opLambda) {
        ${table.camelizedName}CQ query = new ${table.camelizedName}CQ();
        ${table.camelizedName}CF filter = new ${table.camelizedName}CF();
        filteredLambda.callback(query, filter);
        if (query.hasQueries()) {
            FilteredQueryBuilder builder = regFilteredQ(query.getQuery(), filter.getFilter());
            if (opLambda != null) {
                opLambda.callback(builder);
            }
        }
    }
#else
    public void filtered(FilteredCall<${table.camelizedName}CQ, ${table.camelizedName}CQ> filteredLambda) {
        filtered(filteredLambda, null);
    }

    public void filtered(FilteredCall<${table.camelizedName}CQ, ${table.camelizedName}CQ> filteredLambda,
            ConditionOptionCall<BoolQueryBuilder> opLambda) {
        bool((must, should, mustNot, filter)->{
            filteredLambda.callback(must, filter);
        }, opLambda);
    }

    public void not(OperatorCall<${table.camelizedName}CQ> notLambda) {
        not(notLambda, null);
    }

    public void not(OperatorCall<${table.camelizedName}CQ> notLambda, ConditionOptionCall<NotQueryBuilder> opLambda) {
        ${table.camelizedName}CQ notQuery = new ${table.camelizedName}CQ();
        notLambda.callback(notQuery);
        if (notQuery.hasQueries()) {
            if (notQuery.getQueryBuilderList().size() > 1) {
                final String msg = "not query must be one query.";
                throw new IllegalConditionBeanOperationException(msg);
            }
            NotQueryBuilder builder = QueryBuilders.notQuery(notQuery.getQueryBuilderList().get(0));
            if (opLambda != null) {
                opLambda.callback(builder);
            }
        }
    }
#end

    public void bool(BoolCall<${table.camelizedName}CQ> boolLambda) {
        bool(boolLambda, null);
    }

    public void bool(BoolCall<${table.camelizedName}CQ> boolLambda, ConditionOptionCall<BoolQueryBuilder> opLambda) {
        ${table.camelizedName}CQ mustQuery = new ${table.camelizedName}CQ();
        ${table.camelizedName}CQ shouldQuery = new ${table.camelizedName}CQ();
        ${table.camelizedName}CQ mustNotQuery = new ${table.camelizedName}CQ();
#if ($esVersion.isLessThan("2.0.0"))
        boolLambda.callback(mustQuery, shouldQuery, mustNotQuery);
        if (mustQuery.hasQueries() || shouldQuery.hasQueries() || mustNotQuery.hasQueries()) {
            BoolQueryBuilder builder = regBoolCQ(mustQuery.getQueryBuilderList(), shouldQuery.getQueryBuilderList(), mustNotQuery.getQueryBuilderList());
            if (opLambda != null) {
                opLambda.callback(builder);
            }
        }
#else
        ${table.camelizedName}CQ filterQuery = new ${table.camelizedName}CQ();
        boolLambda.callback(mustQuery, shouldQuery, mustNotQuery, filterQuery);
        if (mustQuery.hasQueries() || shouldQuery.hasQueries() || mustNotQuery.hasQueries() || filterQuery.hasQueries()) {
            BoolQueryBuilder builder = regBoolCQ(mustQuery.getQueryBuilderList(), shouldQuery.getQueryBuilderList(), mustNotQuery.getQueryBuilderList(), filterQuery.getQueryBuilderList());
            if (opLambda != null) {
                opLambda.callback(builder);
            }
        }
#end
    }

    // ===================================================================================
    //                                                                           Query Set
    //                                                                           =========
#if (!$table.columnList.contains("id"))
    public void setId_Equal(String id) {
        setId_Term(id, null);
    }

    public void setId_Equal(String id, ConditionOptionCall<TermQueryBuilder> opLambda) {
        setId_Term(id, opLambda);
    }

    public void setId_Term(String id) {
        setId_Term(id, null);
    }

    public void setId_Term(String id, ConditionOptionCall<TermQueryBuilder> opLambda) {
        TermQueryBuilder builder = regTermQ("_id", id);
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }
#if ($esVersion.isGreaterEqual("2.0.0"))

    public void setId_NotEqual(String id) {
        setId_NotTerm(id, null);
    }

    public void setId_NotEqual(String id, ConditionOptionCall<NotQueryBuilder> opLambda) {
        setId_NotTerm(id, opLambda);
    }

    public void setId_NotTerm(String id) {
        setId_NotTerm(id, null);
    }

    public void setId_NotTerm(String id, ConditionOptionCall<NotQueryBuilder> opLambda) {
        NotQueryBuilder builder = QueryBuilders.notQuery(regTermQ("_id", id));
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }
#end

    public void setId_Terms(Collection<String> idList) {
        setId_Terms(idList, null);
    }

    public void setId_Terms(Collection<String> idList, ConditionOptionCall<IdsQueryBuilder> opLambda) {
        IdsQueryBuilder builder = regIdsQ(idList);
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void setId_InScope(Collection<String> idList) {
        setId_Terms(idList, null);
    }

    public void setId_InScope(Collection<String> idList, ConditionOptionCall<IdsQueryBuilder> opLambda) {
        setId_Terms(idList, opLambda);
    }

    public Bs${table.camelizedName}CQ addOrderBy_Id_Asc() {
        regOBA("_id");
        return this;
    }

    public Bs${table.camelizedName}CQ addOrderBy_Id_Desc() {
        regOBD("_id");
        return this;
    }

#end
#foreach ($column in $table.columnList)
#if ($column.isNormalColumn)
#set ($javaNative = ${column.type})
    public void set${column.capCamelName}_Equal($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_Term(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_Equal($javaNative ${column.uncapCamelName}, ConditionOptionCall<TermQueryBuilder> opLambda) {
        set${column.capCamelName}_Term(${column.uncapCamelName}, opLambda);
    }

    public void set${column.capCamelName}_Term($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_Term(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_Term($javaNative ${column.uncapCamelName}, ConditionOptionCall<TermQueryBuilder> opLambda) {
        TermQueryBuilder builder = regTermQ("${column.name}", ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }
#if ($esVersion.isGreaterEqual("2.0.0"))

    public void set${column.capCamelName}_NotEqual($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_NotTerm(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_NotEqual($javaNative ${column.uncapCamelName}, ConditionOptionCall<NotQueryBuilder> opLambda) {
        set${column.capCamelName}_NotTerm(${column.uncapCamelName}, opLambda);
    }

    public void set${column.capCamelName}_NotTerm($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_NotTerm(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_NotTerm($javaNative ${column.uncapCamelName}, ConditionOptionCall<NotQueryBuilder> opLambda) {
        NotQueryBuilder builder = QueryBuilders.notQuery(regTermQ("${column.name}", ${column.uncapCamelName}));
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }
#end

    public void set${column.capCamelName}_Terms(Collection<$javaNative> ${column.uncapCamelName}List) {
        set${column.capCamelName}_Terms(${column.uncapCamelName}List, null);
    }

    public void set${column.capCamelName}_Terms(Collection<$javaNative> ${column.uncapCamelName}List, ConditionOptionCall<TermsQueryBuilder> opLambda) {
        TermsQueryBuilder builder = regTermsQ("${column.name}", ${column.uncapCamelName}List);
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_InScope(Collection<$javaNative> ${column.uncapCamelName}List) {
        set${column.capCamelName}_Terms(${column.uncapCamelName}List, null);
    }

    public void set${column.capCamelName}_InScope(Collection<$javaNative> ${column.uncapCamelName}List, ConditionOptionCall<TermsQueryBuilder> opLambda) {
        set${column.capCamelName}_Terms(${column.uncapCamelName}List, opLambda);
    }

    public void set${column.capCamelName}_Match($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_Match(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_Match($javaNative ${column.uncapCamelName}, ConditionOptionCall<MatchQueryBuilder> opLambda) {
        MatchQueryBuilder builder = regMatchQ("${column.name}", ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_MatchPhrase($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_MatchPhrase(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_MatchPhrase($javaNative ${column.uncapCamelName}, ConditionOptionCall<MatchQueryBuilder> opLambda) {
        MatchQueryBuilder builder = regMatchPhraseQ("${column.name}", ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_MatchPhrasePrefix($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_MatchPhrasePrefix(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_MatchPhrasePrefix($javaNative ${column.uncapCamelName}, ConditionOptionCall<MatchQueryBuilder> opLambda) {
        MatchQueryBuilder builder = regMatchPhrasePrefixQ("${column.name}", ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_Fuzzy($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_Fuzzy(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_Fuzzy($javaNative ${column.uncapCamelName}, ConditionOptionCall<FuzzyQueryBuilder> opLambda) {
        FuzzyQueryBuilder builder = regFuzzyQ("${column.name}", ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

#if ($javaNative == "String")
    public void set${column.capCamelName}_Prefix($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_Prefix(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_Prefix($javaNative ${column.uncapCamelName}, ConditionOptionCall<PrefixQueryBuilder> opLambda) {
        PrefixQueryBuilder builder = regPrefixQ("${column.name}", ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

#end
    public void set${column.capCamelName}_GreaterThan($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_GreaterThan(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_GreaterThan($javaNative ${column.uncapCamelName}, ConditionOptionCall<RangeQueryBuilder> opLambda) {
        RangeQueryBuilder builder = regRangeQ("${column.name}", ConditionKey.CK_GREATER_THAN, ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_LessThan($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_LessThan(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_LessThan($javaNative ${column.uncapCamelName}, ConditionOptionCall<RangeQueryBuilder> opLambda) {
        RangeQueryBuilder builder = regRangeQ("${column.name}", ConditionKey.CK_LESS_THAN, ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_GreaterEqual($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_GreaterEqual(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_GreaterEqual($javaNative ${column.uncapCamelName}, ConditionOptionCall<RangeQueryBuilder> opLambda) {
        RangeQueryBuilder builder = regRangeQ("${column.name}", ConditionKey.CK_GREATER_EQUAL, ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_LessEqual($javaNative ${column.uncapCamelName}) {
        set${column.capCamelName}_LessEqual(${column.uncapCamelName}, null);
    }

    public void set${column.capCamelName}_LessEqual($javaNative ${column.uncapCamelName}, ConditionOptionCall<RangeQueryBuilder> opLambda) {
        RangeQueryBuilder builder = regRangeQ("${column.name}", ConditionKey.CK_LESS_EQUAL, ${column.uncapCamelName});
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public Bs${table.camelizedName}CQ addOrderBy_${column.capCamelName}_Asc() {
        regOBA("${column.name}");
        return this;
    }

    public Bs${table.camelizedName}CQ addOrderBy_${column.capCamelName}_Desc() {
        regOBD("${column.name}");
        return this;
    }

#end
#end
}
