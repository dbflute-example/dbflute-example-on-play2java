${manager.allClassCopyright}package ${request.package}.cbean.ca.bs;

import java.util.List;

import ${request.package}.allcommon.EsAbstractConditionAggregation;
import ${request.package}.allcommon.EsAbstractConditionQuery;
import ${request.package}.cbean.ca.${table.camelizedName}CA;
import ${request.package}.cbean.cq.${table.camelizedName}CQ;
import ${request.package}.cbean.cq.bs.Bs${table.camelizedName}CQ;

import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.bucket.filter.FilterAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.global.GlobalBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramBuilder;
import org.elasticsearch.search.aggregations.bucket.histogram.HistogramBuilder;
import org.elasticsearch.search.aggregations.bucket.missing.MissingBuilder;
import org.elasticsearch.search.aggregations.bucket.range.RangeBuilder;
import org.elasticsearch.search.aggregations.bucket.range.date.DateRangeBuilder;
import org.elasticsearch.search.aggregations.bucket.range.ipv4.IPv4RangeBuilder;
import org.elasticsearch.search.aggregations.bucket.sampler.SamplerAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.significant.SignificantTermsBuilder;
import org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;
import org.elasticsearch.search.aggregations.metrics.avg.AvgBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityBuilder;
import org.elasticsearch.search.aggregations.metrics.max.MaxBuilder;
import org.elasticsearch.search.aggregations.metrics.min.MinBuilder;
import org.elasticsearch.search.aggregations.metrics.percentiles.PercentileRanksBuilder;
import org.elasticsearch.search.aggregations.metrics.percentiles.PercentilesBuilder;
import org.elasticsearch.search.aggregations.metrics.scripted.ScriptedMetricBuilder;
import org.elasticsearch.search.aggregations.metrics.stats.StatsBuilder;
import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStatsBuilder;
import org.elasticsearch.search.aggregations.metrics.sum.SumBuilder;
import org.elasticsearch.search.aggregations.metrics.tophits.TopHitsBuilder;
import org.elasticsearch.search.aggregations.metrics.valuecount.ValueCountBuilder;

/**
 * @author ESFlute (using FreeGen)
 */
public abstract class Bs${table.camelizedName}CA extends EsAbstractConditionAggregation {

    // ===================================================================================
    //                                                                     Aggregation Set
    //                                                                           =========

    public void filter(String name, EsAbstractConditionQuery.OperatorCall<Bs${table.camelizedName}CQ> queryLambda,
            ConditionOptionCall<FilterAggregationBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        ${table.camelizedName}CQ cq = new ${table.camelizedName}CQ();
        if (queryLambda != null) {
            queryLambda.callback(cq);
        }
        FilterAggregationBuilder builder = regFilterA(name, cq.getQuery());
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }

    public void global(String name, ConditionOptionCall<GlobalBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        GlobalBuilder builder = regGlobalA(name);
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }

    public void sampler(String name, ConditionOptionCall<SamplerAggregationBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        SamplerAggregationBuilder builder = regSamplerA(name);
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }

    public void scriptedMetric(String name, ConditionOptionCall<ScriptedMetricBuilder> opLambda) {
        ScriptedMetricBuilder builder = regScriptedMetricA(name);
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void topHits(String name, ConditionOptionCall<TopHitsBuilder> opLambda) {
        TopHitsBuilder builder = regTopHitsA(name);
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

#foreach ($column in $table.columnList)
#if ($column.isNormalColumn)
#set ($javaNative = ${column.type})
    // $javaNative ${column.name}
#if ($javaNative != "String" && $javaNative != "Date" && $javaNative != "Timestamp" && $javaNative != "LocalDateTime")
    public void set${column.capCamelName}_Avg() {
        set${column.capCamelName}_Avg(null);
    }

    public void set${column.capCamelName}_Avg(ConditionOptionCall<AvgBuilder> opLambda) {
        set${column.capCamelName}_Avg("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_Avg(String name, ConditionOptionCall<AvgBuilder> opLambda) {
        AvgBuilder builder = regAvgA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_Max() {
        set${column.capCamelName}_Max(null);
    }

    public void set${column.capCamelName}_Max(ConditionOptionCall<MaxBuilder> opLambda) {
        set${column.capCamelName}_Max("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_Max(String name, ConditionOptionCall<MaxBuilder> opLambda) {
        MaxBuilder builder = regMaxA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }
    public void set${column.capCamelName}_Min() {
        set${column.capCamelName}_Min(null);
    }

    public void set${column.capCamelName}_Min(ConditionOptionCall<MinBuilder> opLambda) {
        set${column.capCamelName}_Min("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_Min(String name, ConditionOptionCall<MinBuilder> opLambda) {
        MinBuilder builder = regMinA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_Sum() {
        set${column.capCamelName}_Sum(null);
    }

    public void set${column.capCamelName}_Sum(ConditionOptionCall<SumBuilder> opLambda) {
        set${column.capCamelName}_Sum("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_Sum(String name, ConditionOptionCall<SumBuilder> opLambda) {
        SumBuilder builder = regSumA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_ExtendedStats() {
        set${column.capCamelName}_ExtendedStats(null);
    }

    public void set${column.capCamelName}_ExtendedStats(ConditionOptionCall<ExtendedStatsBuilder> opLambda) {
        set${column.capCamelName}_ExtendedStats("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_ExtendedStats(String name, ConditionOptionCall<ExtendedStatsBuilder> opLambda) {
        ExtendedStatsBuilder builder = regExtendedStatsA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_Stats() {
        set${column.capCamelName}_Stats(null);
    }

    public void set${column.capCamelName}_Stats(ConditionOptionCall<StatsBuilder> opLambda) {
        set${column.capCamelName}_Stats("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_Stats(String name, ConditionOptionCall<StatsBuilder> opLambda) {
        StatsBuilder builder = regStatsA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_Percentiles() {
        set${column.capCamelName}_Percentiles(null);
    }

    public void set${column.capCamelName}_Percentiles(ConditionOptionCall<PercentilesBuilder> opLambda) {
        set${column.capCamelName}_Percentiles("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_Percentiles(String name, ConditionOptionCall<PercentilesBuilder> opLambda) {
        PercentilesBuilder builder = regPercentilesA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_PercentileRanks() {
        set${column.capCamelName}_PercentileRanks(null);
    }

    public void set${column.capCamelName}_PercentileRanks(ConditionOptionCall<PercentileRanksBuilder> opLambda) {
        set${column.capCamelName}_PercentileRanks("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_PercentileRanks(String name, ConditionOptionCall<PercentileRanksBuilder> opLambda) {
        PercentileRanksBuilder builder = regPercentileRanksA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_Histogram() {
        set${column.capCamelName}_Histogram(null);
    }

    public void set${column.capCamelName}_Histogram(ConditionOptionCall<HistogramBuilder> opLambda) {
        set${column.capCamelName}_Histogram("${column.name}", opLambda, null);
    }

    public void set${column.capCamelName}_Histogram(ConditionOptionCall<HistogramBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        set${column.capCamelName}_Histogram("${column.name}", opLambda, aggsLambda);
    }

    public void set${column.capCamelName}_Histogram(String name, ConditionOptionCall<HistogramBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        HistogramBuilder builder = regHistogramA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }

    public void set${column.capCamelName}_Range() {
        set${column.capCamelName}_Range(null);
    }

    public void set${column.capCamelName}_Range(ConditionOptionCall<RangeBuilder> opLambda) {
        set${column.capCamelName}_Range("${column.name}", opLambda, null);
    }

    public void set${column.capCamelName}_Range(ConditionOptionCall<RangeBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        set${column.capCamelName}_Range("${column.name}", opLambda, aggsLambda);
    }

    public void set${column.capCamelName}_Range(String name, ConditionOptionCall<RangeBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        RangeBuilder builder = regRangeA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }
#end

#if ($javaNative == "String")
    public void set${column.capCamelName}_Terms() {
        set${column.capCamelName}_Terms(null);
    }

    public void set${column.capCamelName}_Terms(ConditionOptionCall<TermsBuilder> opLambda) {
        set${column.capCamelName}_Terms("${column.name}", opLambda, null);
    }

    public void set${column.capCamelName}_Terms(ConditionOptionCall<TermsBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        set${column.capCamelName}_Terms("${column.name}", opLambda, aggsLambda);
    }

    public void set${column.capCamelName}_Terms(String name, ConditionOptionCall<TermsBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        TermsBuilder builder = regTermsA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }

    public void set${column.capCamelName}_SignificantTerms() {
        set${column.capCamelName}_SignificantTerms(null);
    }

    public void set${column.capCamelName}_SignificantTerms(ConditionOptionCall<SignificantTermsBuilder> opLambda) {
        set${column.capCamelName}_SignificantTerms("${column.name}", opLambda, null);
    }

    public void set${column.capCamelName}_SignificantTerms(ConditionOptionCall<SignificantTermsBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        set${column.capCamelName}_SignificantTerms("${column.name}", opLambda, aggsLambda);
    }

    public void set${column.capCamelName}_SignificantTerms(String name, ConditionOptionCall<SignificantTermsBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        SignificantTermsBuilder builder = regSignificantTermsA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }

    public void set${column.capCamelName}_IpRange() {
        set${column.capCamelName}_IpRange(null);
    }

    public void set${column.capCamelName}_IpRange(ConditionOptionCall<IPv4RangeBuilder> opLambda) {
        set${column.capCamelName}_IpRange("${column.name}", opLambda, null);
    }

    public void set${column.capCamelName}_IpRange(ConditionOptionCall<IPv4RangeBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        set${column.capCamelName}_IpRange("${column.name}", opLambda, aggsLambda);
    }

    public void set${column.capCamelName}_IpRange(String name, ConditionOptionCall<IPv4RangeBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        IPv4RangeBuilder builder = regIpRangeA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }
#end

#if ($javaNative == "Date" || $javaNative == "Timestamp" || $javaNative == "LocalDateTime")
    public void set${column.capCamelName}_DateRange() {
        set${column.capCamelName}_DateRange(null);
    }

    public void set${column.capCamelName}_DateRange(ConditionOptionCall<DateRangeBuilder> opLambda) {
        set${column.capCamelName}_DateRange("${column.name}", opLambda, null);
    }

    public void set${column.capCamelName}_DateRange(ConditionOptionCall<DateRangeBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        set${column.capCamelName}_DateRange("${column.name}", opLambda, aggsLambda);
    }

    public void set${column.capCamelName}_DateRange(String name, ConditionOptionCall<DateRangeBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        DateRangeBuilder builder = regDateRangeA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }

    public void set${column.capCamelName}_DateHistogram() {
        set${column.capCamelName}_DateHistogram(null);
    }

    public void set${column.capCamelName}_DateHistogram(ConditionOptionCall<DateHistogramBuilder> opLambda) {
        set${column.capCamelName}_DateHistogram("${column.name}", opLambda, null);
    }

    public void set${column.capCamelName}_DateHistogram(ConditionOptionCall<DateHistogramBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        set${column.capCamelName}_DateHistogram("${column.name}", opLambda, aggsLambda);
    }

    public void set${column.capCamelName}_DateHistogram(String name, ConditionOptionCall<DateHistogramBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        DateHistogramBuilder builder = regDateHistogramA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }
#end

    public void set${column.capCamelName}_Count() {
        set${column.capCamelName}_Count(null);
    }

    public void set${column.capCamelName}_Count(ConditionOptionCall<ValueCountBuilder> opLambda) {
        set${column.capCamelName}_Count("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_Count(String name, ConditionOptionCall<ValueCountBuilder> opLambda) {
        ValueCountBuilder builder = regCountA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_Cardinality() {
        set${column.capCamelName}_Cardinality(null);
    }

    public void set${column.capCamelName}_Cardinality(ConditionOptionCall<CardinalityBuilder> opLambda) {
        set${column.capCamelName}_Cardinality("${column.name}", opLambda);
    }

    public void set${column.capCamelName}_Cardinality(String name, ConditionOptionCall<CardinalityBuilder> opLambda) {
        CardinalityBuilder builder = regCardinalityA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
    }

    public void set${column.capCamelName}_Missing() {
        set${column.capCamelName}_Missing(null);
    }

    public void set${column.capCamelName}_Missing(ConditionOptionCall<MissingBuilder> opLambda) {
        set${column.capCamelName}_Missing("${column.name}", opLambda, null);
    }

    public void set${column.capCamelName}_Missing(ConditionOptionCall<MissingBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        set${column.capCamelName}_Missing("${column.name}", opLambda, aggsLambda);
    }

    public void set${column.capCamelName}_Missing(String name, ConditionOptionCall<MissingBuilder> opLambda, OperatorCall<Bs${table.camelizedName}CA> aggsLambda) {
        MissingBuilder builder = regMissingA(name, "${column.name}");
        if (opLambda != null) {
            opLambda.callback(builder);
        }
        if (aggsLambda != null) {
            ${table.camelizedName}CA ca = new ${table.camelizedName}CA();
            aggsLambda.callback(ca);
            ca.getAggregationBuilderList().forEach(builder::subAggregation);
        }
    }

#end
#end
}
